



###一、图片的高效加载

######如何加载图片？
使用BitmapFactory类加载图片，根据图片的不同来源，BitmapFactory类提供了4种加载图片的方法：
- decodeFile  从文件系统加载图片
- decodeResource  从资源中加载图片
- decodeStream  从输入流中加载图片
- decodeByteArray  从字节数组中加载图片
4个方法都返回一个Bitmap对象。4个方法都有一个重载方法可以接收 BitmapFactory.Options 参数。可以通过设置Options参数的inSampleSize值来缩放图片，规则如下：

- inSampleSize=1 图片是原图大小
- inSampleSize=2 图片缩放1/4
- inSampleSize=4 图片缩放1/16
- ..........（规律）

inSampleSize的值应该是2的指数，小于1的话当作1来处理。
>如果不是2的指数，系统会向下取整选择一个最接近2的指数的数来代替，但是并不是在所有Android版本上都是这样。


######如何高效加载图片？

```
BitmapFactory.Options options = new BitmapFactory.Options();  
options.inJustDecodeBounds = true;  
BitmapFactory.decodeResource(getResources(), R.id.myimage, options); 
//这时options就记录了图片的原始宽高
//但是图片并没有加载到内存
//接下来用得到的原图宽高来计算缩放比例
int imageHeight = options.outHeight;  
int imageWidth = options.outWidth;
//计算规则自己定，比如缩放到view的大小
//将计算的结果
options.inSampleSize = 计算的结果;
options.inJustDecodeBounds = false; 
//这时加载图片就会将缩放后的图片加载到内存了
BitmapFactory.decodeResource(getResources(), R.id.myimage, options);
```




###二、图片的缓存

LruCache内存缓存
DiskLruCache磁盘缓存

#####LruCache
- LruCache是一个泛型类，内部采用LinkedHashMap以强引用的方式存储外界的缓存对象，并提供了get和put方法来完成缓存的获取与添加操作。
- LruCache是线程安全的
- 使用LruCache需要指定缓存的总容量大小并重写sizeOf方法。sizeOf方法是用来计算缓存对象大小的，单位必须和总容量单位一致。
- LruCache移除旧缓存的时候会调用entyrRemoved方法，所以有需要的话也可以重写entyrRemoved方法


#####DiskLruCache
- DiskLruCache非Google官方编写，但获得官方认证

- 存储位置：DiskLruCache并没有限制数据的缓存位置，可以自由地进行设定。但是通常情况下多数应用程序都会将缓存的位置选择为 /sdcard/Android/data/<application package>/cache 这个路径。选择在这个位置有两点好处：第一，这是存储在SD卡上的，因此即使缓存再多的数据也不会对手机的内置存储空间有任何影响，只要SD卡空间足够就行。第二，这个路径被Android系统认定为应用程序的缓存路径，当程序被卸载的时候，这里的数据也会一起被清除掉，这样就不会出现删除程序之后手机上还有很多残留数据的问题。

- 由于DiskLruCache并不是由Google官方编写的，所以这个类并没有被包含在Android API当中，我们需要将这个类从网上下载下来，下载好了源码之后，只需要在项目中新建一个libcore.io包，然后将DiskLruCache.java文件复制到这个包中即可。（Glide开源库封装有了DiskLruCache这个类，所以添加Glide依赖后也可以直接使用这个类）

- DiskLruCache是不能new出实例的，需要调用它的open()方法
`public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)`
open()方法接收四个参数，第一个参数指定的是数据的缓存地址，第二个参数指定当前应用程序的版本号，第三个参数指定同一个key可以对应多少个缓存文件，基本都是传1，第四个参数指定最多可以缓存多少字节的数据。


详细：http://blog.csdn.net/guolin_blog/article/details/28863651






