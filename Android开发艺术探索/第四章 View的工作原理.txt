

### ViewRoot和DecorView
ViewRoot对应于ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程都是通过ViewRoot来完成的。
View的绘制流程从ViewRoot的performTraversals方法开始的，它经过measure、layout、draw三个过程最终将一个View绘制出来。



### MeasureSpec
MeasureSpec是一个32位int值，高2位代表SpecMode，低30位代表SpecSize。
SpecMode指测量模式，有三种模式，SpecSize指在某种测量模式下的规格大小。

三种模式：
1. UNSPECIFIED  父容器不对View有任何限制，要多大给多大
2. EXACTLY  父容器已经检测出View所需的精确大小，大小就是SpecSize指定的值。对应于match_parent和具体数值两种情况。
3. AT_MOST  父容器指定一个大小，View的大小不能大于这个值，具体值由View的具体实现决定。对应于wrap_content。


> 为了操作简便，于是系统给我提供了一个MeasureSpec工具类。这个工具类有四个方法和三个常量供我们使用：
> 
> 三个常量：MeasureSpec.UNSPECIFIED、MeasureSpec.EXACTLY、MeasureSpec.AT_MOST
> 
> //这个是由我们给出的尺寸大小和模式生成一个包含这两个信息的int变量
> //mode参数传三个常量中的一个
> public static int makeMeasureSpec(int size, int mode)
> 
> //这个是得到这个变量中表示的模式信息，将得到的值与三个常量进行比较。
> public static int getMode(int measureSpec)
> 
> //这个是得到这个变量中表示的尺寸大小的值。
> public static int getSize(int measureSpec)
> 
> //把这个变量里面的模式和大小组成字符串返回来，方便打日志
> public static String toString(int measureSpec)



### 四种在Activity中获取View宽高的方法
1. onWindowFocusChanged  会多次调用
2. view.post(runnable)
3. ViewTreeObserver  View树改变也会调用多次
4. view.measure()  比较复杂而且有些情况无法使用



### 自定义View注意的问题
- 让View支持wrap_content  onMeasure中处理
- 如果有必要，支持padding  onDraw的时候处理
- 尽量不使用Handler  View里面已经有post系列方法
- 及时停止线程动画  在onDetachedFromWindow里面做，对应的是onAttachedToWindow
- 滑动冲突


### 扩展
问题：自定义View的时候onMeasure为什么多次被调用
原因：ViewGroup除了会完成自己的measure过程外，还会遍历去调用所有子View的measure方法，各个子View再递归去执行这个过程。ViewGroup是一个抽象类，没有重写View的onMeasure方法，但是它提供了一个measureChildren方法，通过这个方法会调用到每个子View的measure方法。调用子View的measure时的参数是通过获取子View的布局参数后用getChildMeasureSpec方法创建的。
从ViewGroup的角度来看，比如LinearLayout，它要想测量自己宽高，必须知道子View的数量和每个子View的宽高，所以它必须要先测量子View，然后根据测量子View的结果和自身的一些情况来测量自身宽高，比如把子View的高加起来再加上自身的padding来确定自身的高。

待解决的问题：
1. 为什么要测量子View多次和每次测量的结果有什么不同？而且不同布局比如LinearLayout和RelativeLayout，它们对子View的测量次数是不同的。
2. onLayout为什么被调用两次？

























