

堆：堆内存主要作用是存放运行时创建(new)的对象  (存取速度慢，可以运行时动态分配内存，生存期不需要提前确定)
栈：栈内存的主要作用是存放基本数据类型和引用变量  (主要用来执行程序，存取速度快，大小和生存期必须确定，缺乏灵活性)

栈里面存的是引用，堆存的是对象本身，如下代码
User user = new User(name, age);
或者这样写
User user;
user = new User(name, age);
其中user就是对象的引用，存在栈里面，new User(name, age)是对象本身，存在堆里面

实例代码+图解

代码
int i = 0;
User user = new User(name, age);

图解 在堆栈的存储情况
***************          ****************
*     栈      *          *      堆      *
*             *          *              *
***************          ****************
*      i      *          *  new User    *
***************          *  (name, age) *
*    user     * =======> *              *
***************          ****************


========================================================================================================
为什么又栈内存和堆内存之分？

当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法定义的变量将会放到这块栈内存里，随着方法的结束，这个方法的
内存栈也将自动销毁。（不需要GC回收） 因此，所有在方法中定义的局部变量放在栈内存中； 当我们在程序中创建一个对象时，这
个对象会被保存到运行时数据区中，以便反复利用（复用，因为创建对象的成本通常较大），这个运行时数据区就是堆内存。堆内存
中的对象不会随着方法的结束而销毁，即使方法结束后，这个对象还可能被另外一个引用变量所引用（在方法的参数传递时很常见），
则这个对象依然不会被销毁。只有当一个对象没有任何引用变量去引用它时，系统的垃圾回收器（GC）才会在合适的时候回收它。




为什么上面说创建对象的开销（成本）比较大？

来看看如何创建对象、创建对象的过程：
创建对象的根本途径是构造器，通过new关键字来调用某个类的构造器即可创建这个类的实例。但对象不是完全由构造器来负责创建的，
实际上，当程序员调用构造器时，系统会先为该对象分配内存空间，并为这个对象执行默认初始化，这个对象已经产生了---这些是在
构造器执行之前就完成的，也就是说，当系统开始执行构造器的执行体之前，系统已经创建了一个对象，只是这对象还不能被外部程序
访问，只能在构造器中通过this来引用。当构造器的执行体执行结束后，这个对象作为构造器的返回值被返回，通常还会赋给另外一个
引用类型的变量，从而让外部程序可以访问。（当然可以通过设置构造器的访问权限private，阻止其他类创建该类的实例）





