实现拔掉充电线后定时关机

*********************************************************************************************************************************************
1.网上一种方法如下，可以自己写个app编译到系统里，这里代码加到系统设置的代码里了（省事）
这个方法用线程计时，当设备息屏休眠后线程不再执行，所以这个方法有问题
*********************************************************************************************************************************************
package com.android.settings.shutdown;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

public class PowerStateChangeReceiver extends BroadcastReceiver {

	private static final String TAG = "PowerStateChangeReceiver";
	private static final boolean IS_DEBUG = true;
	private static final int SHUTDOWN_TIME = 5; // In seconds

	private static boolean isPowerConnect = true;
	private static int offSecond = 0;

	private Context context;

	@Override
	public void onReceive(Context context, Intent intent) {

		this.context = context;

		if (Intent.ACTION_POWER_CONNECTED.equals(intent.getAction())) {
			logD("BroadcastReceiver onReceive -> power connect.");
			isPowerConnect = true;
		} else if (Intent.ACTION_POWER_DISCONNECTED.equals(intent.getAction())) {
			logD("BroadcastReceiver onReceive -> power disconnect.");
			isPowerConnect = false;
			new Thread(new shutdownThread()).start();
		}
	}

	public void shutdown(Context context) {
		try {
			Intent intent = new Intent(Intent.ACTION_REQUEST_SHUTDOWN);

			intent.putExtra(Intent.EXTRA_KEY_CONFIRM, false);

			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			context.startActivity(intent);
			logD("start shutdown.");
		} catch (Exception e) {
			Log.e(TAG, "::: Exception, shutdown exception: " + e);
		}
	}

	public class shutdownThread implements Runnable {

		@Override
		public void run() {
			while (!isPowerConnect) {
				try {
					Thread.sleep(1000);
					offSecond++;
					if (offSecond == SHUTDOWN_TIME) {
						Message message = new Message();
						message.what = 1;
						shutdownHandler.sendMessage(message);
					}
				} catch (InterruptedException e) {
					Log.e(TAG, "::: Exception, shutdown threat exception: " + e);
				}
			}
			offSecond = 0;
			logD("shutdown thread end.");
		}
	}

	final Handler shutdownHandler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case 1:
				logD("handler receive shutdown message.");
				if (!isPowerConnect) {
					shutdown(context);
				}
				break;

			default:
				break;
			}
		}
	};

	private void logD(String msg) {
		if (IS_DEBUG) {
			Log.d(TAG, "::: " + msg);
		}
	}
}

-----------------------------------------------------------------------------------------

<receiver android:name="com.android.settings.shutdown.PowerStateChangeReceiver" >
            <intent-filter>
                <action android:name="android.intent.action.ACTION_POWER_CONNECTED" />
                <action android:name="android.intent.action.ACTION_POWER_DISCONNECTED" />
            </intent-filter>
</receiver>

***************************************************************************************************************************************************************
2.上面的线程方法有问题，改用Alarm，其中开机广播忽略原因如下
（由于我的设备插着充电线开机后会收到DISCONNECTED广播，获取的状态也是未充电状态，也就是插电开机后会自动定时关机，想通过开机广播阻止定时关机，可以达到预期效果
但是拔掉线后收不到DISCONNECTED广播，所以不能完全解决问题
接下来研究framework代码，看看为什么插电开机记录的是DISCONNECTED状态(插电开机后记录的状态不对)）
***************************************************************************************************************************************************************
package com.android.settings.shutdown;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.BatteryManager;
import android.util.Log;

public class PowerStateChangeReceiver extends BroadcastReceiver {

	private static final boolean IS_OPEN_SHUTDOWN = true;

	private static final String TAG = "PowerStateChangeReceiver";
	private static final String DO_SHUTDOWN = "settings.powerchangereceiver.SHUTDOWN";
	private static final boolean IS_DEBUG = true;
	private static final long SHUTDOWN_TIME = 10000; // In millisecond

	private Context mContext = null;
	private AlarmManager mAlarmManager = null;
	private PendingIntent mPendingIntent = null;

	@Override
	public void onReceive(Context context, Intent intent) {

		if (!IS_OPEN_SHUTDOWN) {
			Log.d(TAG, "::: Timing shutdown is not open.");
			return;
		}

		init(context);

		if (Intent.ACTION_POWER_CONNECTED.equals(intent.getAction())) {
			logD("BroadcastReceiver onReceive -> power connect." + isCharging());
			cancelAlarm();
		} else if (Intent.ACTION_POWER_DISCONNECTED.equals(intent.getAction())) {
			logD("BroadcastReceiver onReceive -> power disconnect."
					+ isCharging());
			setAlarm();
		}

		if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) {
			logD("-------------------- boot completed.");
			cancelAlarm();
		}

		if (DO_SHUTDOWN.equals(intent.getAction())) {
			logD("BroadcastReceiver onReceive -> do shutdown.");
			shutdown();
		}

	}

	private void init(Context context) {
		if (mContext == null) {
			mContext = context;
		}

		if (mAlarmManager == null) {
			mAlarmManager = (AlarmManager) mContext
					.getSystemService(Service.ALARM_SERVICE);
		}

		if (mPendingIntent == null) {
			Intent intent = new Intent(DO_SHUTDOWN);
			mPendingIntent = PendingIntent.getBroadcast(mContext, 0, intent,
					PendingIntent.FLAG_CANCEL_CURRENT);
		}
	}

	private void setAlarm() {
		logD("::: set alarm...");
		if (mAlarmManager == null || mPendingIntent == null) {
			return;
		}
		mAlarmManager.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis()
				+ SHUTDOWN_TIME, mPendingIntent);
	}

	private void cancelAlarm() {
		logD("::: cancel alarm...");
		if (mAlarmManager == null || mPendingIntent == null) {
			return;
		}
		mAlarmManager.cancel(mPendingIntent);
	}

	public void shutdown() {
		if (isCharging()) {
			Log.d(TAG, "::: device is charging, do not shutdown.");
			return;
		}
		try {
			Intent intent = new Intent(Intent.ACTION_REQUEST_SHUTDOWN);
			intent.putExtra(Intent.EXTRA_KEY_CONFIRM, false);
			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			mContext.startActivity(intent);
			logD("start shutdown.");
		} catch (Exception e) {
			Log.e(TAG, "::: Exception, shutdown exception: " + e);
		}
	}

	private boolean isCharging() {
		IntentFilter filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
		Intent batteryStatusIntent = mContext.registerReceiver(null, filter);

		int status = batteryStatusIntent.getIntExtra(
				BatteryManager.EXTRA_STATUS, -1);
		if ((status == BatteryManager.BATTERY_STATUS_CHARGING)
				|| (status == BatteryManager.BATTERY_STATUS_FULL)) {
			return true;
		}
		return false;
	}

	private void logD(String msg) {
		if (IS_DEBUG) {
			Log.d(TAG, "::: " + msg);
		}
	}
}
***************************************************************************************************************************************************************
3.分析framework源码
***************************************************************************************************************************************************************
(1)首先找个切入口
源码目录 cd 到frameworks
grep命令搜索  grep -irn "Intent.ACTION_POWER_CONNECTED" *
定位到代码 frameworks/base/services/core/java/com/android/server/BatteryService.java 的processValuesLocked(参数)方法
验证一下是不是这里
-> 加log，注意这里可以直接用Slog方便，第一个参数直接用TAG否则可能编译不过（这里不会），原因看代码不解释了 
-> cd 到源码根目录 
-> mmm frameworks/base/services 
-> 看日志输出的 Install: out/target/product/(这里是自己的产品名)/system/framework/services.jar 
-> 将 out/目录下编出来的services.jar  push 到 设备的system/framework/services.jar (可能需要先adb root + adb remount) 
-> adb reboot重启设备并看log 
-> 结论：是这里

(2)看代码 + 打log

部分log
//第一次开机是这样/////////////////////////////////////////////////////////////////////////////////////////////////////
01-05 03:30:18.701  1067  1087 D BatteryService: ::::: mPlugType=0  mLastPlugType=-1
01-05 03:30:18.701  1067  1087 D BatteryService: ::::: power disconnect broadcast...
01-05 03:30:20.527  1067  1067 D BatteryService: ::::: mPlugType=0  mLastPlugType=0
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 正常是这样/////////////////////////////////////////////////////////////////////////////////////////////////////
01-05 03:27:59.436  1081  1589 D BatteryService: ::::: mPlugType=0  mLastPlugType=2
01-05 03:27:59.436  1081  1589 D BatteryService: ::::: power disconnect broadcast...

01-05 03:28:02.714  1081  1386 D BatteryService: ::::: mPlugType=2  mLastPlugType=0
01-05 03:28:02.715  1081  1081 D BatteryService: ::::: power connect broadcast...
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

结果1: 开机后processValuesLocked()方法里面的mPlugType值不对，应该是2，实际是0

mPlugType的赋值主要在processValuesLocked()方法的几个判断里面(原因：mBatteryProps.chargerUsbOnline这个值不对)
找mBatteryProps -> update（props）-> batteryPropertiesChanged(props)  到这里不知道这个参数props是从哪来的了（走不下去了）,涉及到 IBatteryPropertiesListener,貌似是 frameworks\native\services\batteryservice 路径下的cpp文件


(3)百度 BatteryProperties
搜出很多电池管理相关的，开始了解上层Java到底层驱动的大概过程(其实最开始先想到的就是先了解从底层开始向上层的大概过程，不过当时(百度)搜索的关键字不对，没找到有用的东西)
参考： http://blog.csdn.net/daweibalang717/article/details/41446993
文章里大部分是C/C++的代码(C只看得懂helloworld), 先粗略扫了一遍，发现我要找的mBatteryProps值的来源就在这里，包括(2)最后走不下去的那里，看完之后基本全通了(需要先去了解Binder机制)

结果2：mPlugType值不对是因为条件 mBatteryProps.chargerUsbOnline不对，mBatteryProps最终是从/sys/class/power_supply路径下的文件读取，该路径下的文件由底层驱动更新，当供电设备的状态发生变化时，driver会更新这些文件


通过adb命令查看/sys/class/power_supply路径下的文件(比如usb的online状态)
adb shell
cd /sys/class/power_supply/
cd usb
cat online

非充电状态可以通过wifi连接adb查看




--------------------------------------------------------------------------
对应路径：/sys/class/power_supply，然后遍历整个文件夹，查找各个能源供应设备的各种属性。

各能源设备属性概况如下：

/sys/class/power_supply/ac/online AC 电源连接状态

/sys/class/power_supply/usb/online USB电源连接状态

/sys/class/power_supply/battery/status 充电状态

/sys/class/power_supply/battery/health 电池状态

/sys/class/power_supply/battery/present 使用状态

/sys/class/power_supply/battery/capacity 电池 level

/sys/class/power_supply/battery/batt_vol 电池电压

/sys/class/power_supply/battery/batt_temp 电池温度

/sys/class/power_supply/battery/technology 电池技术

当供电设备的状态发生变化时，driver会更新这些文件，然后通过jni中的本地方法android_server_BatteryService_update向java层发送信息




















